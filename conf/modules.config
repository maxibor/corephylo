/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    withName: 'SAMPLESHEET_CHECK' {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'GUNZIP' {
        publishDir = [
            enabled: false
        ]
    }

    withName: 'BAKTA' {
        publishDir = [
            path: { "${params.outdir}/bakta" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'PANAROO_RUN' {
        publishDir = [
            path: { "${params.outdir}/panaroo" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ext.args = [
            "--alignment core",
            "--clean-mode strict",
            "--core_threshold ${params.core_threshold}"
        ].join(' ')
    }

    withName: 'PANAROO_INTEGRATE' {
        publishDir = [
            path: { "${params.outdir}/panaroo" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ext.args = [
            "--alignment core",
            "--core_threshold ${params.core_threshold}",
            "--remove-invalid-genes"
        ].join(' ')
    }

    withName: 'CLONALFRAMEML' {
        publishDir = [
            path: { "${params.outdir}/clonalframeml" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ext.args = [
            "-xmfa_file true",
            "-show_progress true",
            "-output_filtered true"
        ].join(' ')
    }

    withName: COMP_RM {
        publishDir = [
            path: { "${params.outdir}/clonalframeml" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: CFML_VIZ {
        publishDir = [
            path: { "${params.outdir}/clonalframeml" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'IQTREE_*' {
        ext.cpu_auto = params.iqtree_cpu_auto
    }

    withName: 'IQTREE_POST' {
        publishDir = [
            path: { "${params.outdir}/iqtree" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ext.prefix = "core_genome_no_recomb"
		ext.args = [
			params.iqtree_no_bootstrap ? "": "-B 1000",
			params.iqtree_no_bnni ? "": "-bnni",
            params.iqtree_mset ? "-mset ${params.iqtree_mset}": "" 
		].join(' ')
    }

    withName: 'IQTREE_ROOT' {
        publishDir = [
            path: { "${params.outdir}/iqtree" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ext.prefix = "core_genome_no_recomb_root"
		ext.args = [
			"--model-joint 12.12", // rootstrap
            "-B 1000",
            "--root-test -zb 1000 -au" // root position test
		].join(' ')
    }

    withName: RAPIDNJ {

        publishDir = [
            path: { "${params.outdir}/rapidnj" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]

        cpus   = { check_max( 16    * task.attempt, 'cpus'    ) }
        memory = { check_max( 32.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 16.h  * task.attempt, 'time'    ) }
        ext.args = [
            "-t d",
            "-b 1000"
        ].join(' ')
    }

    withName: 'SNPSITES' {
        publishDir = [
            path: { "${params.outdir}/snpsites" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'SNPDISTS' {
        publishDir = [
            path: { "${params.outdir}/snpdists" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'CUSTOM_DUMPSOFTWAREVERSIONS' {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            pattern: '*_versions.yml'
        ]
    }

}
